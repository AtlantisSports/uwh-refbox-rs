use super::*;

#[allow(non_camel_case_types)]
#[derive(Copy, Clone, Debug)]
pub enum Signal {
    ls10_a,
    ls10_b,
    ls10_c,
    ls10_d,
    ls10_e,
    ls10_f,
    ls10_g,
    ls1_a,
    ls1_b,
    ls1_c,
    ls1_d,
    ls1_e,
    ls1_f,
    ls1_g,
    rs10_a,
    rs10_b,
    rs10_c,
    rs10_d,
    rs10_e,
    rs10_f,
    rs10_g,
    rs1_a,
    rs1_b,
    rs1_c,
    rs1_d,
    rs1_e,
    rs1_f,
    rs1_g,
    m10_a,
    m10_b,
    m10_c,
    m10_d,
    m10_e,
    m10_f,
    m10_g,
    m1_a,
    m1_b,
    m1_c,
    m1_d,
    m1_e,
    m1_f,
    m1_g,
    s10_a,
    s10_b,
    s10_c,
    s10_d,
    s10_e,
    s10_f,
    s10_g,
    s1_a,
    s1_b,
    s1_c,
    s1_d,
    s1_e,
    s1_f,
    s1_g,
    white_on_left,
    white_on_right,
    ref_to_ind,
    left_to_ind,
    right_to_ind,
    one,
    slash,
    two,
    overtime,
    sdn_dth,
    colon,
}

impl Index<Signal> for DisplayState {
    type Output = bool;

    fn index(&self, signal: Signal) -> &Self::Output {
        match signal {
            Signal::ls10_a => &self.left_score_tens.a,
            Signal::ls10_b => &self.left_score_tens.b,
            Signal::ls10_c => &self.left_score_tens.c,
            Signal::ls10_d => &self.left_score_tens.d,
            Signal::ls10_e => &self.left_score_tens.e,
            Signal::ls10_f => &self.left_score_tens.f,
            Signal::ls10_g => &self.left_score_tens.g,
            Signal::ls1_a => &self.left_score_ones.a,
            Signal::ls1_b => &self.left_score_ones.b,
            Signal::ls1_c => &self.left_score_ones.c,
            Signal::ls1_d => &self.left_score_ones.d,
            Signal::ls1_e => &self.left_score_ones.e,
            Signal::ls1_f => &self.left_score_ones.f,
            Signal::ls1_g => &self.left_score_ones.g,
            Signal::rs10_a => &self.right_score_tens.a,
            Signal::rs10_b => &self.right_score_tens.b,
            Signal::rs10_c => &self.right_score_tens.c,
            Signal::rs10_d => &self.right_score_tens.d,
            Signal::rs10_e => &self.right_score_tens.e,
            Signal::rs10_f => &self.right_score_tens.f,
            Signal::rs10_g => &self.right_score_tens.g,
            Signal::rs1_a => &self.right_score_ones.a,
            Signal::rs1_b => &self.right_score_ones.b,
            Signal::rs1_c => &self.right_score_ones.c,
            Signal::rs1_d => &self.right_score_ones.d,
            Signal::rs1_e => &self.right_score_ones.e,
            Signal::rs1_f => &self.right_score_ones.f,
            Signal::rs1_g => &self.right_score_ones.g,
            Signal::m10_a => &self.time_m_tens.a,
            Signal::m10_b => &self.time_m_tens.b,
            Signal::m10_c => &self.time_m_tens.c,
            Signal::m10_d => &self.time_m_tens.d,
            Signal::m10_e => &self.time_m_tens.e,
            Signal::m10_f => &self.time_m_tens.f,
            Signal::m10_g => &self.time_m_tens.g,
            Signal::m1_a => &self.time_m_ones.a,
            Signal::m1_b => &self.time_m_ones.b,
            Signal::m1_c => &self.time_m_ones.c,
            Signal::m1_d => &self.time_m_ones.d,
            Signal::m1_e => &self.time_m_ones.e,
            Signal::m1_f => &self.time_m_ones.f,
            Signal::m1_g => &self.time_m_ones.g,
            Signal::s10_a => &self.time_s_tens.a,
            Signal::s10_b => &self.time_s_tens.b,
            Signal::s10_c => &self.time_s_tens.c,
            Signal::s10_d => &self.time_s_tens.d,
            Signal::s10_e => &self.time_s_tens.e,
            Signal::s10_f => &self.time_s_tens.f,
            Signal::s10_g => &self.time_s_tens.g,
            Signal::s1_a => &self.time_s_ones.a,
            Signal::s1_b => &self.time_s_ones.b,
            Signal::s1_c => &self.time_s_ones.c,
            Signal::s1_d => &self.time_s_ones.d,
            Signal::s1_e => &self.time_s_ones.e,
            Signal::s1_f => &self.time_s_ones.f,
            Signal::s1_g => &self.time_s_ones.g,
            Signal::white_on_left => &self.white_on_left,
            Signal::white_on_right => &self.white_on_right,
            Signal::ref_to_ind => &self.ref_to_ind,
            Signal::left_to_ind => &self.left_to_ind,
            Signal::right_to_ind => &self.right_to_ind,
            Signal::one => &self.one,
            Signal::slash => &self.slash,
            Signal::two => &self.two,
            Signal::overtime => &self.overtime,
            Signal::sdn_dth => &self.sdn_dth,
            Signal::colon => &self.colon,
        }
    }
}
